buildscript {
  repositories {
    mavenCentral()
  }
}

apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'

sourceCompatibility = 1.8
group = 'org.apache'

jar {
  baseName = 'ambari-consul-bridge'
}

configurations {
  deployerJars
  all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}

uploadArchives {
  repositories {
    mavenDeployer {
      configuration = configurations.deployerJars
      repository(url: "s3://maven.sequenceiq.com/releases") {
        authentication(userName: "$System.env.AWS_ACCESS_KEY", passphrase: "$System.env.AWS_SECRET_ACCESS_KEY")
      }
      snapshotRepository(url: "s3://maven.sequenceiq.com/snapshots") {
        authentication(userName: "$System.env.AWS_ACCESS_KEY", passphrase: "$System.env.AWS_SECRET_ACCESS_KEY")
      }
    }
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url "http://maven.sequenceiq.com/snapshots" }
  maven { url "http://maven.sequenceiq.com/releases" }
}

dependencies {
  compile ('org.apache.ambari:ambari-server:2.0.0.0-SNAPSHOT') {
    exclude group: 'org.apache.ambari', module: 'ambari-server'
  }
  compile 'com.google.inject:guice:4.1.0'
  compile 'org.slf4j:slf4j-api:1.7.12'
  compile 'com.sequenceiq:consul-api:1.10'
  testCompile 'junit:junit:4.12'

}

task wrapper(type: Wrapper) { gradleVersion = "2.3" }

task buildInfo(type: BuildInfoTask) {
  destination = file("$buildDir")
  applicationPropertiesPath = "$buildDir"
  basename = jar.baseName
  buildVersion = version
}

compileJava.dependsOn buildInfo

task sourcesJar(type: Jar, dependsOn:classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives sourcesJar
}

class BuildInfoTask extends DefaultTask {
  File destination = new File("build.info")
  String applicationPropertiesPath
  String basename
  String buildVersion

  @TaskAction
  def writeBuildInfo() {
    destination.mkdirs()
    File applicationDestination = new File(applicationPropertiesPath + "/resources/main")
    applicationDestination.mkdirs()
    new File(destination, "build.info").withWriter { out ->
      [
              "ARTIFACT_BASENAME=" + basename,
              "ARTIFACT_VERSION=" + buildVersion,
      ].each { out.println it }
    }
    new File(applicationDestination, "application.properties").withWriter { out ->
      [
              "info.app.name=" + basename,
              "info.app.version=" + buildVersion
      ].each { out.println it }
    }
  }
}